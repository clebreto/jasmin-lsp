// Common library for reduction operations
// This file demonstrates namespace-based requires

fn reduce_sum(reg u64 array_ptr, reg u32 length) -> reg u64 {
  reg u64 sum;
  reg u32 i;
  
  sum = #0;
  i = #0;
  
  while (i < length) {
    // Add array element to sum
    sum = sum + [array_ptr + 8 * i];
    i = i + #1;
  }
  
  return sum;
}

fn reduce_max(reg u64 array_ptr, reg u32 length) -> reg u64 {
  reg u64 max_val;
  reg u32 i;
  
  if (length == #0) {
    return #0;
  }
  
  max_val = [array_ptr];
  i = #1;
  
  while (i < length) {
    reg u64 current;
    current = [array_ptr + 8 * i];
    if (current > max_val) {
      max_val = current;
    }
    i = i + #1;
  }
  
  return max_val;
}

export fn reduce_min(reg u64 array_ptr, reg u32 length) -> reg u64 {
  reg u64 min_val;
  reg u32 i;
  
  if (length == #0) {
    return #0;
  }
  
  min_val = [array_ptr];
  i = #1;
  
  while (i < length) {
    reg u64 current;
    current = [array_ptr + 8 * i];
    if (current < min_val) {
      min_val = current;
    }
    i = i + #1;
  }
  
  return min_val;
}